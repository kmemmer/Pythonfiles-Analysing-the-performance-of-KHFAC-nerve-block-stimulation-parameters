/*--------------------------------------------------------------------
Koen Emmer
SIMULATION OF PNS MYELINATED AXON WITH EXTRACELLULAR AND INTRACELLULAR ELECTRODE.

This model is an adapted version of MRGaxon.hoc:
Cameron C. McIntyre
SIMULATION OF PNS MYELINATED AXON
This model is described in detail in:
McIntyre CC, Richardson AG, and Grill WM. Modeling the excitability of
mammalian nerve fibers: influence of afterpotentials on the recovery
cycle. Journal of Neurophysiology 87:995-1006, 2002.

The basis of this adapted version was a version made by Joao Couto, that can be found here:
https://github.com/jcouto/neuron/blob/master/MRGaxon/MRGnodeHFS.hoc
---------------------------------------------------------------------
---------------------------------------------------------------------
stdgui (or nrnmainmenu) needs to be loaded first from Python to correctly work. Next parameters can be passed to Neuron, and then this .hoc file can be opened.
The following variables can be set://
    axonnodes		- number of nodes that are going to be used in the simulation
    fiberD			- diameter of the fiber, can be set to: 5.7, 7.3, 8.7, 10.0, 11.5, 12.8, 14.0, 15.0 or 16.0

ipulse1.mod and axnode.mod are necessary for the model to work:
    ipulse1.mod: https://senselab.med.yale.edu/ModelDB/ShowModel.cshtml?model=225086&file=%2FGC-gna_distribution%2Fipulse1.mod#tabs-2
    axnode.mod can be found with the MRG model on ModelDB
---------------------------------------------------------------------*/

proc model_globals() {
	//celsius = 37
    //v_init = -80
    //dt
    //tstop

    //---------------TOPOLOGICAL PARAMETERS-------------------------------
    // FULL SEGMENT = -NODE-MYSA-FLUT-STIN-STIN-STIN-STIN-STIN-STIN-FLUT-MYSA-NODE-
    paranodes1 = 2*(axonnodes-1)                            // Number of MYSA paranodes
    paranodes2 = 2*(axonnodes-1)                            // Number of FLUT paranodes
    axoninter = 6*(axonnodes-1)                             // Number of STIN internodes
    axontotal = axonnodes+paranodes1+paranodes2+axoninter   // Total amount of segments

    //---------------MORPHOLOGICAL PARAMETERS-----------------------------
    // All morphological parameters are in um (micrometers)
    //fiberD=5.7	    // Fiber Diameter, choose from 5.7, 7.3, 8.7, 10.0, 11.5, 12.8, 14.0, 15.0, 16.0
    paralength1 = 3     // MYSA Length
    nodelength = 1.0    // Node length
    space_p1 = 0.002    // MYSA periaxonal space width
    space_p2 = 0.004    // FLUT periaxonal space width
    space_i = 0.004     // STIN periaxonal space width

    //---------------ELECTRICAL PARAMETERS---------------------------------
    rhoa = 0.7e6	                    // Axoplasmic resistivity               // Ohm-um //
    mycm = 0.1		                    // Myelin capacitance                   // uF/cm2/lamella membrane // 2 membranes per lamella
    mygm = 0.001	                    // Myelin conductance                   //  S/cm2/lamella membrane // 2 membranes per lamella
    rhoe = 5e6		                    // Resistivity of extracellular medium  // Ohm-um//

    // DELETE EVERYTHING BENEATH?
    //-----------------------RECORDING-----------------------------------
    
    //recordAll = 0   /*Uncomment to record voltage from all nodes.*/
    
}
model_globals ()

//---------------INITIALIZE THE DEPENDENT VARIABLES---------------------
proc dependent_var() {
    // The fiber diameter can not be changed in the middle of the simulation.
    /*  fiberD = Fiber diameter          g =                                    deltax = Node-node separation
         axonD = Axon diameter      paraD1 = MYSA diameter                 paralength2 = FLUT length
         nodeD = Node diameter      paraD2 = FLUT diameter (same as STIN)           nl = number of myelin lemella */
    if (fiberD==5.7)  {g=0.605 axonD=3.4  nodeD=1.9 paraD1=1.9 paraD2=3.4  deltax=500  paralength2=35 nl=80 }
    if (fiberD==7.3)  {g=0.630 axonD=4.6  nodeD=2.4 paraD1=2.4 paraD2=4.6  deltax=750  paralength2=38 nl=100}
    if (fiberD==8.7)  {g=0.661 axonD=5.8  nodeD=2.8 paraD1=2.8 paraD2=5.8  deltax=1000 paralength2=40 nl=110}
    if (fiberD==10.0) {g=0.690 axonD=6.9  nodeD=3.3 paraD1=3.3 paraD2=6.9  deltax=1150 paralength2=46 nl=120}
    if (fiberD==11.5) {g=0.700 axonD=8.1  nodeD=3.7 paraD1=3.7 paraD2=8.1  deltax=1250 paralength2=50 nl=130}
    if (fiberD==12.8) {g=0.719 axonD=9.2  nodeD=4.2 paraD1=4.2 paraD2=9.2  deltax=1350 paralength2=54 nl=135}
    if (fiberD==14.0) {g=0.739 axonD=10.4 nodeD=4.7 paraD1=4.7 paraD2=10.4 deltax=1400 paralength2=56 nl=140}
    if (fiberD==15.0) {g=0.767 axonD=11.5 nodeD=5.0 paraD1=5.0 paraD2=11.5 deltax=1450 paralength2=58 nl=145}
    if (fiberD==16.0) {g=0.791 axonD=12.7 nodeD=5.5 paraD1=5.5 paraD2=12.7 deltax=1500 paralength2=60 nl=150}

    // Inverses of Gp:
    Rpn0 = (rhoa*.01)/(PI*((((nodeD/2)+space_p1)^2)-((nodeD/2)^2)))             // Periaxonal resistance NODE
    Rpn1 = (rhoa*.01)/(PI*((((paraD1/2)+space_p1)^2)-((paraD1/2)^2)))           // Periaxonal resistance MYSA
    Rpn2 = (rhoa*.01)/(PI*((((paraD2/2)+space_p2)^2)-((paraD2/2)^2)))           // Periaxonal resistance FLUT
    Rpx  = (rhoa*.01)/(PI*((((axonD/2)+space_i)^2)-((axonD/2)^2)))              // Periaxonal resistance STIN

    interlength = (deltax-nodelength-(2*paralength1)-(2*paralength2))/6
}
dependent_var()

//---------------CREATE SECTIONS AND APPEND CHANNELS-----------------
create node[axonnodes], MYSA[paranodes1], FLUT[paranodes2], STIN[axoninter]
access node[0]
objref s[axontotal]
create electrode
not_built = 1

proc initMRG() {
    //print "Initializing MRGaxon."
    for i=0,axonnodes-1 {
		node[i]{
		    s[i] = new SectionRef()					
		    nseg = 1
		    diam = nodeD
		    L = nodelength
		    Ra = rhoa/10000
		    cm = 2
		    insert axnode
		    insert extracellular xraxial=Rpn0 xg=1e10 xc=0
		}
    }
    for i=0, paranodes1-1 {
        MYSA[i]{
            s[axonnodes+i] = new SectionRef()
            nseg = 1
            diam = fiberD
            L = paralength1
            Ra = rhoa*(1/(paraD1/fiberD)^2)/10000
            cm = 2*paraD1/fiberD
            insert pas
            g_pas = 0.001*paraD1/fiberD
            e_pas = v_init
            insert extracellular xraxial=Rpn1 xg=mygm/(nl*2) xc=mycm/(nl*2)
        }
    }
    for i=0, paranodes2-1 {
	FLUT[i]{
            s[axonnodes+paranodes1+i] = new SectionRef()
            nseg = 1
            diam = fiberD
            L = paralength2
            Ra = rhoa*(1/(paraD2/fiberD)^2)/10000
            cm = 2*paraD2/fiberD
            insert pas
            g_pas = 0.0001*paraD2/fiberD
            e_pas = v_init
            insert extracellular xraxial=Rpn2 xg=mygm/(nl*2) xc=mycm/(nl*2)
        }
    }
    for i=0, axoninter-1 {
        STIN[i]{
            s[axonnodes+paranodes1+paranodes2+i]=new SectionRef()
            nseg = 1
            diam = fiberD
            L = interlength
            Ra = rhoa*(1/(axonD/fiberD)^2)/10000
            cm = 2*axonD/fiberD
            insert pas
            g_pas = 0.0001*axonD/fiberD
            e_pas = v_init
            insert extracellular xraxial=Rpx xg=mygm/(nl*2) xc=mycm/(nl*2)
        }
    }	
    for i=0, axonnodes-2 {
	connect MYSA[2*i](0), node[i](1)
	connect FLUT[2*i](0), MYSA[2*i](1)
	connect STIN[6*i](0), FLUT[2*i](1)
	connect STIN[6*i+1](0), STIN[6*i](1)
	connect STIN[6*i+2](0), STIN[6*i+1](1)
	connect STIN[6*i+3](0), STIN[6*i+2](1)
	connect STIN[6*i+4](0), STIN[6*i+3](1)	
	connect STIN[6*i+5](0), STIN[6*i+4](1)	
	connect FLUT[2*i+1](0), STIN[6*i+5](1)	
	connect MYSA[2*i+1](0), FLUT[2*i+1](1)
	connect node[i+1](0), MYSA[2*i+1](1)	
    }   
}

proc initialize() {
    finitialize(v_init)
    fcurrent()
}

//---------------VECTORS AND OBJECT VARIABLES INITIALIZATION----------
objref Ve, X, Y, Z, exIClmp, inIClmp, apc, rec[axonnodes], rec_spk, v_first, v_ref, v_last, rec_Ve

//----INITIALIZE THE LOCATION STIM WITH REGARDS TO EACH COMPARTMENT----
//	The reference node is at position zero.
proc XYZ_loc() {
    //---------------VECTORS AND OBJECT VARIABLES INITIALIZATION----------
    Ve = new Vector(axontotal,0)
    X  = new Vector(axontotal,0)
    Y  = new Vector(axontotal,0)
    Z  = new Vector(axontotal,0)
	// UNCOMMENT TO RECORD ELECTRODE
	rec_Ve = new Vector()
	rec_Ve.record(&s[HFSreferenceNode].sec.e_extracellular) //mV
	rec_Ve.clear()

	//Set location of center of first node of Ranvier
    reference_value = (HFSreferenceNode)*(2*paralength1+2*paralength2+6*interlength+nodelength)                         // This was HFSreferenceNode-1
    Y.x[0]=-reference_value

    //Set location centers of nodes of Ranvier
    for i=1,axonnodes-1 {
	Y.x[i]=Y.x[i-1]+(2*paralength1+2*paralength2+6*interlength+nodelength)
    }
    // Set location centers of paranode and internode segments
    for i=0, axonnodes-2 {  // -2, as i starts at 0, and the amount of internode segments is one less than amount of nodes
        Y.x[axonnodes+2*i]                          = Y.x[i] + nodelength/2+paralength1/2                               // MYSA right to first node of Ranvier
        Y.x[axonnodes+paranodes1+2*i]               = Y.x[axonnodes+2*i] + paralength1/2 + paralength2/2                // FLUT right to first MYSA
        Y.x[axonnodes+paranodes1+paranodes2+6*i]    = Y.x[axonnodes+paranodes1+2*i] + paralength2/2 + interlength/2     // 1st STIN right to first FLUT
        Y.x[axonnodes+paranodes1+paranodes2+6*i+1]  = Y.x[axonnodes+paranodes1+paranodes2+6*i]   + interlength            // 2nd STIN right to first FLUT
        Y.x[axonnodes+paranodes1+paranodes2+6*i+2]  = Y.x[axonnodes+paranodes1+paranodes2+6*i+1] + interlength          // 3rd STIN right to first FLUT
        Y.x[axonnodes+paranodes1+paranodes2+6*i+3]  = Y.x[axonnodes+paranodes1+paranodes2+6*i+2] + interlength          // 4th STIN right to first FLUT
        Y.x[axonnodes+paranodes1+paranodes2+6*i+4]  = Y.x[axonnodes+paranodes1+paranodes2+6*i+3] + interlength          // 5th STIN right to first FLUT
        Y.x[axonnodes+paranodes1+paranodes2+6*i+5]  = Y.x[axonnodes+paranodes1+paranodes2+6*i+4] + interlength          // 6th STIN right to first FLUT
        Y.x[axonnodes+paranodes1+2*i+1]             = Y.x[axonnodes+2*i+1] - paralength1/2 -paralength2/2               // FLUT left to second MYSA
        Y.x[axonnodes+2*i+1]                        = Y.x[i+1] - nodelength/2 - paralength1/2                           // MYSA left to next node of Ranvier
    }
    for i=0,axontotal-1 {
        X.x[i]=0            //Model build over Y-axis,
        Z.x[i]=0            //centered over x- and z-axis
    }
}

//---------------CALCULATE THE ELECTRIC POTENTIAL SCALAR--------------
//Uses the approximation of a current point source and assumes a uniform field. Return electrode placed at infinity
proc calc_voltage() { local i
    if(bipolar == 0){
        for i=0, axontotal-1 {
            Ve.x[i]=(rhoe)/(4*PI*sqrt((HFSz-Z.x[i])^2+(HFSy-Y.x[i])^2+(HFSx-X.x[i])^2))
        }
    }else if(bipolar == 1){
        for i=0, axontotal-1 {
            Ve.x[i]=(rhoe)*((1/(4*PI*sqrt((HFSz-Z.x[i])^2+(HFSy-Y.x[i])^2+(HFSx-X.x[i])^2)))-(1/(4*PI*sqrt((HFSz2-Z.x[i])^2+(HFSy2-Y.x[i])^2+(HFSx2-X.x[i])^2))))
        }
    }
}

objref rec_electrode_block
objref rec_electrode_stim
proc stimulus() {
    calc_voltage()
    //---------------INITIALIZE THE EXTRACELLULAR STIM----------
    electrode{
            exIClmp = new IClamp(0.5)
    }
    
    // UNCOMMENT TO RECORD ELECTRODE
    rec_electrode_block = new Vector()
    rec_electrode_block.record(&exIClmp.i)
    rec_electrode_block.clear()
    //
    
    //---------------INITIALIZE THE INTRACELLULAR STIM----------
    if(intrinsicStim == 1){
        node[intrinsicNode+1] {
        // inject pattern in one of the ends of the axon.
            if(intrinsicType == 0){
                inIClmp = new IClamp(0.5)
                inIClmp.del = intrinsicDel      // The delay until the onset of the stimulus (in ms)
                inIClmp.dur = intrinsicDur      // The duration of the stimulus (in ms)
                inIClmp.amp = intrinsicAmp      // The amplitude of the stimulus (in nA)
                }else if(intrinsicType == 1){
                inIClmp = new Ipulse1(0.5)
                inIClmp.del = intrinsicDel      // The delay until the onset of the stimulus (in ms)
                inIClmp.num = intrinsicNum      // The duration of the stimulus (in ms)
                inIClmp.amp = intrinsicAmp      // The amplitude of the stimulus (in nA)
                inIClmp.ton = intrinsicTON      // The duration of ON phase (in ms)
                inIClmp.toff = intrinsicTOFF    // The duration of OFF phase (in ms)
                }
            }
	    rec_electrode_stim = new Vector()
        rec_electrode_stim.record(&inIClmp.i)       // inIClmp.i = current ic inIClmp
	    rec_electrode_stim.clear()
	    }
}

//---------------DEFINES WHAT TO DO AT EACH TIMESTEP--------------
proc advance() { local i
    // Set Vextracellular using neurons mechanisms.
    for ii=0,axontotal-1 {
	    s[ii].sec.e_extracellular(0.5)=(exIClmp.i)*Ve.x[ii]     // Set the extracellular voltages at each segment
    }
    fadvance()
}


proc makeRecorders() {
    v_first = new Vector()
    v_ref = new Vector()
    v_last = new Vector()
    v_first.record(&node[0].v(0.5))
    v_ref.record(&node[HFSreferenceNode].v(0.5))
    v_last.record(&node[axonnodes-1].v(0.5))
    //---------------RECORD ACTION POTENTIAL TIMESTAMPS---------
    node[axonnodes-1] {
        apc = new APCount(0.5)
	apc.thresh = -15
        rec_spk = new Vector()
        apc.record(rec_spk)
    }//RECORDS INTO REC_SPK
    
    //---------------RECORD ALL VOLTAGE TRACES (if recordAll)---------
    if(recordAll) {
        for ii=0,axonnodes-1 {
            rec[ii] = new Vector()
            rec[ii].record(&node[ii].v(0.5))
        }
    }
}

// Build the model
proc buildModel() {
    if (not_built) {
		initMRG()
		XYZ_loc()                   // Storing locations of the segments
		stimulus()
		initialize()
		not_built=0
	}
}

// Reset the model
proc resetModel() {
    XYZ_loc()
    stimulus()
    initialize()
    init()
    //print "Reset MRGaxon."
}
